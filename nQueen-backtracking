package Java;

import java.util.ArrayList;
import java.util.List;

public class NQueen {

    static boolean isSafe(int row, int col, int[][] board, int n) {
        int x = row;
        int y = col;

        while (y >= 0) // check left row
        {
            if (board[x][y] == 1)
                return false;

            y--;
        }

        x = row;
        y = col;
        while (x >= 0 && y >= 0) // check for upper diagonal
        {
            if (board[x][y] == 1)
                return false;

            y--;
            x--;
        }
        x = row;
        y = col;
        while (x < n && y >= 0) // check for lower diagonal
        {
            if (board[x][y] == 1)
                return false;

            y--;
            x++;
        }

        return true;
    }

    static void solve(int col, int[][] board, int n) {
        if (col == n) {
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board.length; j++) {

                    System.out.print(" " + board[i][j]);
                }
                System.out.println();
            }
            System.out.println();
            return;
        }

        for (int row = 0; row < n; row++) {
            if (isSafe(row, col, board, n)) {
                board[row][col] = 1;
                solve(col + 1, board, n);
                board[row][col] = 0;
            }
        }
    }

    public static void main(String[] args) {
        int n = 4;
        int board[][] = new int[n][n];
        solve(0, board, n);
    }

}

/*
 * Output
 * 
 * 0 0 1 0
 * 1 0 0 0
 * 0 0 0 1
 * 0 1 0 0
 * 
 * 0 1 0 0
 * 0 0 0 1
 * 1 0 0 0
 * 0 0 1 0
 * 
 */
